/*
 Copyright (c) 2014, Daniel Eisterhold
 All rights reserved.
 
 Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 
 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 
 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
 
 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package Dallopoly;

//Import ArrayList and Scanner
import java.util.*;
//Import support for file io
import java.io.*;

//Import package containing the square classes
import Squares.*;

public class Board {
	private ArrayList<Square> squares;
	
	public Board() {
		//Initialize the ArrayList with 17 empty spots
		squares = new ArrayList<Square>(17);
		
		//Make sure to change this to the file location if need
		//Ex. "/Users/username/Desktop/squareList.txt"
//		this.getStuff("squareList.txt");
		this.getStuff("/Users/deisterhold/Google Drive/College/Fall 2014/CS 2336/Assignments/Assignment 6/Source Code/Dallopoly/bin/squareList.txt");
	}
	
	//Returns the first element in the ArrayList
	public Square getStartSquare() {
		return squares.get(0);
	}
	
	//Returns the last element in the ArrayList
	public Square getLastSquare() {
		return squares.get(squares.size()-1);
	}
	
	//Takes the current position and the number of spots to move
	public Square move(Square oldSquare, int squaresToMove) {
		//Handle an errors that may arise
		try {
			//Loop through the ArrayList
			for(int item = 0; item < squares.size(); item++) {
				//Check to see what spot the old square was at
				if(squares.get(item).equals(oldSquare)) {
					//Return the square
					return squares.get(item + squaresToMove);
				}
			}
			//If the square didn't exist throw an Exception
			throw new Exception("Item does not exist in ArrayList.");
		}
		//If new square didn't exist because you can't move that many spots
		catch(IndexOutOfBoundsException e) {
			//Return the old spot
			return oldSquare;
		}
		//Handle all other errors
		catch(Exception e) {
			System.out.println("Got Error: " + e.getMessage());
		}
		//Return an empty square (Code should only do this when something goes wrong.)
		return new Square("");
	}
	
	
	private void getStuff(String fileLocation) throws FileNotFoundException {
		try {
			Scanner inputFile = new Scanner(new File(fileLocation));
			inputFile.useDelimiter(",|\n");
			while(inputFile.hasNext()) {
				String type = inputFile.next();
				String name = inputFile.next();
				if(type.equals("Square")) {
					//Create a new Square and add to the array list
					this.squares.add(new Square(name));
					System.out.println("Created a " + this.squares.get(this.squares.size()-1));
				}
				else if(type.equals("PrizeSquare")) {
					//Create a new PrizeSquare and add to the array list
					this.squares.add(new PrizeSquare(name));
					System.out.println("Created a " + this.squares.get(this.squares.size()-1));
				}
				else if(type.equals("PenaltySquare")) {
					//Create a new PenaltySquare and add to the array list
					this.squares.add(new PenaltySquare(name));
					System.out.println("Created a " + this.squares.get(this.squares.size()-1));
				}
				else if(type.equals("LastSquare")) {
					//Create a new LastSquare and add to the array list
					this.squares.add(new LastSquare(name));
					System.out.println("Created a " + this.squares.get(this.squares.size()-1));
				}
				else {
					System.out.println("Invalid Data");
				}
			}
			System.out.println("");
			inputFile.close();
		}
		catch(Exception e) {
			System.out.println("Error Reading File: " + e.getMessage());
			throw new FileNotFoundException();
		}
	}
	 
}
